/*
 * API Title
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{ service: s }
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"ProductsGet",
			strings.ToUpper("Get"),
			"/v1/products",
			c.ProductsGet,
		},
		{
			"ProductsIdDelete",
			strings.ToUpper("Delete"),
			"/v1/products/{id}",
			c.ProductsIdDelete,
		},
		{
			"ProductsIdGet",
			strings.ToUpper("Get"),
			"/v1/products/{id}",
			c.ProductsIdGet,
		},
		{
			"ProductsPost",
			strings.ToUpper("Post"),
			"/v1/products",
			c.ProductsPost,
		},
	}
}

// ProductsGet - 
func (c *DefaultApiController) ProductsGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ProductsGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ProductsIdDelete - 
func (c *DefaultApiController) ProductsIdDelete(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := parseInt32Parameter(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.ProductsIdDelete(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ProductsIdGet - 
func (c *DefaultApiController) ProductsIdGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := parseInt32Parameter(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.ProductsIdGet(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ProductsPost - 
func (c *DefaultApiController) ProductsPost(w http.ResponseWriter, r *http.Request) { 
	product := &Product{}
	if err := json.NewDecoder(r.Body).Decode(&product); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.ProductsPost(r.Context(), *product)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
